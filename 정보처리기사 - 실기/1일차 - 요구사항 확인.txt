1. 소프트 웨어 생명주기 모델 4가지 
	1. 폭포수 모델(Waterfall Model) : 각 단계를 확실히 매듭짓고 그 결과를 철저하게 검토하여 승인 과정을 거친 후에 다음 단계를 진행

	2. 애자일 모델(Agile Model) : 개발하는 과정과 고객과 소통하는 과정을 같이 반복해서 진행 
		 - 스크럼 (Scrum)
		 - XP (eXtreme Programming)
		 - 칸반 (Kanban)
		 - Lean
		 - 기능 중심 개발(FDD : Feature Driven Development)

	3. 나선형 모델(spiral model) : 단계별 계획에 위험 분석 단계가 들어감 
		- 단계 : 계획 수립 -> 위험 분석 -> 개발 및 검증 -> 고객 평가 

	4. 프로토 타입 모델(prototype model) : 실제 개발될 소프트웨어에 대한 견본품을 만들어 최종 결과물을 예측하는 모델 

	* 소프트웨어 공학 : 소프트웨어의 위기를 극복하기 위한 방안으로 연구된 항목 

2. 스크럼(Scrum) : 팀이 중심이 되어 개발의 효율성을 높이는 기법 (팀의 중요성 강조)
	1. 제품 책임자(PO; Product Owner) : 요구사항이 담긴 백로그(Backlog)를 작성하는 주체 
	2. 스크럼 마스터(SM; Scrum Master) : 스크럼 팀의 가이드 역할 
	3. 개발팀(DT; Development Team) : 제품 책임자, 스크럼 마스터를 제외한 모든 팀원 

	스프린트 : 스크럼 개발 프로세스 중 실제 개발 작업을 진행하는 과정으로 2 ~ 4주 정도의 기간 내에서 진행 

	스크럼 진행 단계 : 스프린트 계획 회의 -> 스프린트 -> 일일 스크럼 회의 -> 스프린트 검토 회의 -> 스프린트 회고 

3. XP(eXtreme Programming) : 고객의 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화 하여 개발 생산성을 향상시키는 방법 
	XP의 5가지 핵심 가치 
		1. 의사소통
		2. 단순성
		3. 용기
		4. 존중
		5. 피드백

	XP의 주요 실천 방법 
		1. Pair Programming (짝 프로그래밍) : 다른 사람과 함께 프로그래밍을 수행함으로써 개발에 대한 책임을 공동으로 나눠 갖는 환경을 조성함 
		2. Collective Ownership (공동 코드 소유) : 개발 코드에 대한 권한과 책임을 공동으로 소유함 
		3. Continuous Integration (계속적인 통합) : 모듈 단위로 나눠서 개발된 코드들은 하나의 작업이 마무리 될 때마다 지속적으로 통합됨
		4. Refactoring (리팩토링) : 프로그램 기능의 변경 없이 시스템을 재구성함 

	* Refactoring의 목적 : 프로그램을 쉽게 이해하고 쉽게 수정하여 빠르게 개발할 수 있도록 하기 위함 

4. 개발기술 환경 파악 
	 1. DBMS : 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해 주고, 데이터베이스를 관리해 주는 소프트웨어 
		DBMS 관련 요구사항 식별 시 고려사항
			1. 가용성
			2. 성능
			3. 기술 지원
			4. 상호 호환성
			5. 구축 비용 

	2. 웹 애플리케이션 서버(WAS;  Web Application Server) : 동적인 콘텐츠를 처리하기 위해 사용되는 미들웨어 

	3. 오픈소스(Open Source : 누구나 별다른 제한 없이 사용할 수 있도록 소스코드를 공개한 소프트웨어