1. 프로젝트 관리 : 주어진 기간 내에 최소의 비용으로 사용자를 만족시키는 시스템을 개발하기 위한 전반적인 활동
	- 관리유형
		1-1) 일정 관리 : 작업 순서, 작업 기간 산정, 일정 개발, 일정 통제

		1-2) 비용 관리 : 비용 산정, 비용 예산 편성, 비용 통제

		1-3) 인력 관리 : 프로젝트 팀 편성, 자원 산정, 프로젝트 조직 정의, 프로젝트 팀 개발, 자원 통제, 프로젝트 팀 관리

		1-4) 위험 관리 : 위험 식별, 위험 평가, 위험 대처,  위험 통제

		1-5) 품질 관리 : 품질 계획, 품질 보증 수행, 품질 통제 수행 

2. 소프트웨어 개발 표준 : 소프트웨어 개발 단계에서 수행하는 품질 관리에 사용되는 국제 표준을 의미 
	2-1) ISO/IEC 12207 : ISO 에서 만든 표준 소프트웨어 생명 주기 프로세스

	2-2) CMMI(Capability Maturity Model Integration) : 소프트웨어 개발 조직의 업무 능력 및 조직의 성숙도를 평가하는 모델
		단계) 초기(Initial) -> 관리(Defined) -> 정량적 관리(Quantitatively Managed) -> 최적화(Optimizing)

	2-3) SPICE(Software Process Improvement and Capability dEtermination) : 소프트웨어의 품질 및 생산성 향상을 위해 소프트웨어 프로세스를 평가 및 개선하는 국제 표준 

3. 소프트웨어 개발 방법론 테일러링 : 소프트웨어 개발 방법론의 절차, 사용기법 등을 수정 및 보완하는 작업 
	- 테일러링 고려사항
		3-1) 내부적 기준 : 목표 환경 / 요구사항 / 프로젝트 규모 / 보유 기술 

		3-2) 외부적 기준 : 법적 제약사항 / 표준 품질 기준 

4. 소프트웨어 개발 프레임 워크 : 소프트웨어 개발에 공통적으로 사용되는 구성 요소와 아키텍처를 일반화하여 손쉽게 구현할 수 있도록 여러가지 기능들을 제공해주는 반제품 형태의 소프트웨어 시스템
	* Spring Framework : EJB 기반 자바 플랫폼 오픈 소스 웹 애플리케이션 프레임 워크

	- 특성
		4-1) 모듈화(Modularity) : 캡슐화를 통해 모듈화를 강화하고 설계 및 구현의 변경에 따른 영향을 최소화함으로써 소프트웨어의 품질을 향상시킨다.
		4-2) 재사용성(Reusability) : 다시 사용이 가능한 모듈들을 제공함으로써 예산 절감, 생산성 향상, 품질 보증이 가능하다.
		4-3) 확장성(Extensibility) : 다형성을 통한 인터페이스 확장이 가능하며 다양한 형태와 기능을 가진 애플리케이션 개발이 가능하다.
		4-4) 제어의 역흐름(Inversion of Control) : 개발자가 관리하고 통제해야 하는 객체들의 제어를 프레임워크에 넘김으로써 생산성을 향상시킨다.