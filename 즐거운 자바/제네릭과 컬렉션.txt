[무엇이든 담을 수 있는 상자]
 - 객체는 Object 클래스의 자손이며 Object 클래스를 받는 객체를 생성할 수 있다. 
 - 하지만 상자에서 꺼내서 사용할 때 원래 타입으로 변환시키는 작업이 필요하다. 
이러한 문제상황을 해결하기 위해 제네릭이 등장했다. 

1. 제네릭 <T> 
 - 아직은 정해지지 않은 타입을 사용하겠다. ( 상자에 넣을 때 넣은 타입을 지정 )
 - 내가 원하는 타입을 지정, 형변환 없이 처음에 지정한 타입으로 리턴한다.

제네릭의 장점
1. 정해진 타입만 사용하도록 강제할 수 있다.
2. 타입을 강제함으로써 컴파일할 떄 잘못된 타입의 값이 저장되는 것을 막을 수 있다.

2. 컬렉션 프레임워크(Collection Framework)
 - 자료구조 클래스 패키지
 - 자료를 다룰 때 반드시 필요한 클래스의 모음


2.1) Collection 
 - add() : 추가 
 - iterator() : 순회 
 - size() : 사이즈 

2.2) Iterator : 객체를 순차적으로 꺼냄 
 - hasNext() : 다음순서가 있는지, 리턴 : true, false 
 - next() : 순서를 순회 

2.3) List : 순서를 기억하는 자료구조
 - get() : 조회 

2.4) set : 중복을 허용하지 않는 자료구조 - 순서보장이 되지 않는다.
 - add() : 중복된 값을 추가하지 않는다. 리턴 : true, false 

2.5) Map : key - value를 가지는 자료구조 
 - keySet() : key 순회 
 - put() : 추가 (key, value)

# 자료구조 객체들은 제네릭을 사용하지 않으면 Object 타입을 지정한다. 
# Object 타입으로 지정되면 꺼낼 때 타입을 명시해야 한다. 

* hashCode는 중복이 될 수 있으며 hashCode 비교 후 equals 함수로 비교한다.  


