SOLID 원칙

1. S : Single responsibility principle ( 단일 책임 원칙 )
 - 한 클래스는 하나의 책임만 가져야 한다.
 - 중요한 기준은 변경이다. 변경이 있을 때 파급 효과가 적으면 단일 책임 원칙을 잘 따른 것 
 Ex) UI 변경, 객체의 생성과 사용을 분리 

2. O : Open/closed principle ( 개방-폐쇄 원칙 )
 - 소프트웨어 요소는 확장에는 열려 있으나 변경시엔 닫혀 있어야 한다. 
 - 다형성을 활용 

3. L : Liskov substitution principle ( 리스코프 치환 원칙 )
 - 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
 - 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 다형성을 지원하기 위한 원칙, 
인터페이스를 구현한 구현체는 믿고 사용하려면, 이 원칙이 필요하다. 

4. I : Interface segregation principle ( 인터페이스 분리 원칙 )
 - 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다. 
 - 분리하면 정비 인터페이스 자체가 변해도 운전자 클라이언트에 영향을 주지 않음 
 - 인터페이스가 명확해지고, 대체 가능성이 높아진다. 

5. D : Dependency inversion principle ( 의존관계 역전 원칙 )
 - 프로그래머는 "추상화에 의존해야지, 구체화에 의존하면 안된다." 의존성 주입은 이 원칙에 따라야 한다. 
 - 역할에 의존하게 해야 한다는 것과 같다. 


 - 다형성 만으로는 OCP, DIP를 지킬 수 없다. 