1. 초기 애플리케이션  
 - 초기 Spring은 서비스 기술을 위해 탄생했으며, 대부분 웹 애플리 케이션 이다.
 - 보통 여러 고객이 동시에 요청한다.

# Spring 사용하지 않는 순수 DI 컨테이너는 요청할 때마다 객체를 새로 생성한다.
=> 메모리 낭비로 이어질 수 있음 

해결방안 : 객체가 1개만 생성되고, 공유하도록 설계되어야 한다. ( 싱글톤 패턴의 개념 )

2. 싱글톤 패턴
 - 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴
 - 개체 인스턴스를 2개 이상 생성하지 못하도록 막아야 한다

 객체는 getInstance() 메서드를 통해서만 조회할 수 있게 구현하고, 항상 같은 인스턴스를 반환한다.

3. 싱글톤 패턴의 문제점 
 - 싱글톤 패턴을 구현하는 코드 자체가 많이 들어간다.
 - 의존관계상 클라이언트가 구체 클래스에 의존한다. -> DIP 위반
 - 클라이언트가 구현 클래스에 의존해서 OCP 원칙을 위반할 가능성이 높다. 
 - 테스트하기 어렵다.
 - 내부 속성을 변경하거나 초기화 하기 어렵다.
 - private 생성자로 자식 클래스를 만들기 어렵다.
 - 결론적으로 유연성이 떨어진다. 
 - 안티패턴으로 불리기도 한다.

4. 싱글톤 컨테이너 
 - 스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서 , 객체 인스턴스를 싱글톤 으로 관리한다.
 - 스프링 빈이 바로 싱글톤으로 관리되는 빈이다. 

* 싱글톤 패턴까지 수강 
